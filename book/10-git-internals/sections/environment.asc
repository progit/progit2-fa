=== متغیرهای محیطی

گیت همیشه درون یک `bash` شل اجرا می‌شود و از تعدادی متغیر محیطی شل برای تعیین رفتار خود استفاده
      می‌کند.
      گاهی اوقات دانستن این متغیرها و نحوه استفاده از آن‌ها برای تنظیم رفتار گیت به شکلی که می‌خواهید، مفید است.
      این لیست شامل تمام متغیرهای محیطی نیست که گیت به آن‌ها توجه می‌کند، اما ما به مهم‌ترین آن‌ها خواهیم پرداخت.


==== رفتار جهانی

برخی از رفتارهای عمومی گیت به عنوان یک برنامه کامپیوتری به متغیرهای محیطی بستگی دارد.

*`GIT_EXEC_PATH`* تعیین می‌کند که گیت به دنبال زیر برنامه‌های خود (مانند `git-commit`،
        `git-diff` و دیگران) در کجا باشد.
        می‌توانید با اجرای `git --exec-path` تنظیمات فعلی را بررسی کنید.

*`HOME`* معمولاً به عنوان یک متغیر قابل تنظیم در نظر گرفته نمی‌شود (زیرا به چیزهای
        زیادی وابسته است)، اما جایی است که گیت به دنبال فایل پیکربندی جهانی می‌گردد.
        اگر می‌خواهید یک نصب گیت واقعاً قابل حمل داشته باشید، همراه با پیکربندی جهانی، می‌توانید `HOME` را در
        پروفایل شل گیت قابل حمل خود بازنویسی کنید.

*`PREFIX`* مشابه `HOME` است، اما برای پیکربندی سراسری سیستم.
        گیت به دنبال این فایل در `$PREFIX/etc/gitconfig` می‌گردد.

*`GIT_CONFIG_NOSYSTEM`*، اگر تنظیم شده باشد، استفاده از فایل پیکربندی سراسری سیستم را
        غیرفعال می‌کند.
        این برای زمانی مفید است که پیکربندی سیستم شما با دستورات شما تداخل دارد، اما شما به تغییر یا حذف آن دسترسی
        ندارید.

*`GIT_PAGER`* برنامه‌ای را که برای نمایش خروجی چند صفحه‌ای در خط فرمان استفاده
        می‌شود، کنترل می‌کند.
        اگر این تنظیم نشده باشد، `PAGER` به عنوان یک گزینه پشتیبان استفاده خواهد شد.

*`GIT_EDITOR`* ویرایشگری است که گیت هنگام نیاز کاربر به ویرایش متن (به عنوان مثال،
        پیام کامیت) راه‌اندازی می‌کند.
        اگر تنظیم نشده باشد، `EDITOR` استفاده خواهد شد.


==== مکان‌های مخزن

گیت از چندین متغیر محیطی برای تعیین نحوه تعامل با مخزن فعلی استفاده می‌کند.

*`GIT_DIR`* مکان پوشه `.git` است.
        اگر این مشخص نشده باشد، گیت به سمت بالا در درخت دایرکتوری حرکت می‌کند تا به `~` یا `/`
        برسد و در هر مرحله به دنبال دایرکتوری `.git` می‌گردد.

*`GIT_CEILING_DIRECTORIES`* رفتار جستجو برای دایرکتوری `.git` را کنترل
        می‌کند.
        اگر به دایرکتوری‌هایی دسترسی پیدا کنید که بارگذاری آن‌ها کند است (مانند دایرکتوری‌های روی درایو نوار یا از طریق
        یک اتصال شبکه کند)، ممکن است بخواهید گیت زودتر از آنچه که ممکن است، تلاش را متوقف کند، به ویژه اگر گیت در هنگام
        ساختن پرامپت شل شما فراخوانی شود.

*`GIT_WORK_TREE`* مکان ریشه دایرکتوری کاری برای یک مخزن غیر خالی است.
        اگر `--git-dir` یا `GIT_DIR` مشخص شده باشد اما هیچ یک از `--work-tree`، `GIT_WORK_TREE`
        یا `core.worktree` مشخص نشده باشد، دایرکتوری کاری فعلی به عنوان بالاترین سطح درخت کاری شما در نظر
        گرفته می‌شود.

*`GIT_INDEX_FILE`* مسیر فایل ایندکس (فقط برای مخازن غیر خالی) است.

*`GIT_OBJECT_DIRECTORY`* می‌تواند برای مشخص کردن مکان دایرکتوری که معمولاً در `.git/objects`
        قرار دارد، استفاده شود.

*`GIT_ALTERNATE_OBJECT_DIRECTORIES`* یک لیست جدا شده با دو نقطه (به شکل `/dir/one:/dir/two:…`)
        است که به گیت می‌گوید کجا به دنبال اشیاء بگردد اگر آن‌ها در `GIT_OBJECT_DIRECTORY` نباشند.
        اگر شما پروژه‌های زیادی با فایل‌های بزرگ که محتوای یکسانی دارند، داشته باشید، می‌توانید از این برای جلوگیری از
        ذخیره‌سازی بیش از حد نسخه‌های آن‌ها استفاده کنید.


==== مسیرها

یک "pathspec" به نحوه مشخص کردن مسیرها در گیت اشاره دارد، از جمله استفاده از کاراکترهای wildcard.
        این‌ها در فایل `.gitignore` استفاده می‌شوند، اما همچنین در خط فرمان (`git add *.c`) نیز
        کاربرد دارند.

*`GIT_GLOB_PATHSPECS`* و *`GIT_NOGLOB_PATHSPECS`* رفتار
        پیش‌فرض کاراکترهای wildcard در pathspecs را کنترل می‌کنند.
        اگر `GIT_GLOB_PATHSPECS` به 1 تنظیم شود، کاراکترهای wildcard به عنوان wildcard عمل می‌کنند (که این
        پیش‌فرض است)؛ اگر `GIT_NOGLOB_PATHSPECS` به 1 تنظیم شود، کاراکترهای wildcard فقط خودشان را مطابقت
        می‌دهند، به این معنی که چیزی مانند `*.c` فقط با فایلی که _نامش_ " *.c" است، مطابقت خواهد داشت،
        نه هر فایلی که نامش با `.c` پایان می‌یابد.
        شما می‌توانید این را در موارد فردی با شروع pathspec با `:(glob)` یا `:(literal)` بازنویسی
        کنید، مانند `:(glob)*.c`.

*`GIT_LITERAL_PATHSPECS`* هر دو رفتار فوق را غیرفعال می‌کند؛ هیچ کاراکتر wildcardی
        کار نخواهد کرد و پیشوندهای بازنویسی نیز غیرفعال خواهند شد.

*`GIT_ICASE_PATHSPECS`* تمام pathspecها را به صورت غیر حساس به حروف بزرگ و کوچک تنظیم
        می‌کند.


==== کامیت کردن

ایجاد نهایی یک شیء کامیت گیت معمولاً توسط `git-commit-tree` انجام می‌شود که از این متغیرهای محیطی به
        عنوان منبع اصلی اطلاعات خود استفاده می‌کند و تنها در صورت عدم وجود آن‌ها به مقادیر پیکربندی بازمی‌گردد.

*`GIT_AUTHOR_NAME`* نام قابل خواندن انسانی در فیلد "نویسنده" است.

*`GIT_AUTHOR_EMAIL`* ایمیل برای فیلد "نویسنده" است.

*`GIT_AUTHOR_DATE`* زمان‌سنجی استفاده شده برای فیلد "نویسنده" است.

*`GIT_COMMITTER_NAME`* نام انسانی برای فیلد "کامیت‌کننده" را تنظیم می‌کند.

*`GIT_COMMITTER_EMAIL`* آدرس ایمیل برای فیلد "کامیت‌کننده" است.

*`GIT_COMMITTER_DATE`* برای زمان‌سنجی در فیلد "کامیت‌کننده" استفاده می‌شود.

*`EMAIL`* آدرس ایمیل پشتیبان است در صورتی که مقدار پیکربندی `user.email`
        تنظیم نشده باشد.
        اگر _این_ تنظیم نشده باشد، گیت به نام‌های کاربری و میزبان سیستم بازمی‌گردد.


==== شبکه

گیت از کتابخانه `curl` برای انجام عملیات شبکه‌ای بر روی HTTP استفاده می‌کند، بنابراین *`GIT_CURL_VERBOSE`* به گیت می‌گوید که تمام پیام‌های تولید شده توسط آن کتابخانه را نمایش دهد.
        این مشابه اجرای `curl -v` در خط فرمان است.

*`GIT_SSL_NO_VERIFY`* به گیت می‌گوید که گواهی‌های SSL را تأیید نکند.
        این ممکن است گاهی لازم باشد اگر شما از یک گواهی خود امضا شده برای ارائه مخازن گیت از طریق HTTPS استفاده می‌کنید،
        یا در حال راه‌اندازی یک سرور گیت هستید اما هنوز گواهی کامل را نصب نکرده‌اید.


اگر نرخ داده یک عملیات HTTP کمتر از *`GIT_HTTP_LOW_SPEED_LIMIT`* بایت در ثانیه برای
        مدت زمان بیشتر از *`GIT_HTTP_LOW_SPEED_TIME`* ثانیه باشد، گیت آن عملیات را متوقف خواهد
        کرد.
        این مقادیر مقادیر پیکربندی `http.lowSpeedLimit` و `http.lowSpeedTime` را بازنویسی می‌کنند.

*`GIT_HTTP_USER_AGENT`* رشته user-agent را که گیت هنگام ارتباط بر روی HTTP استفاده
        می‌کند، تنظیم می‌کند.
        پیش‌فرض یک مقدار مانند `git/2.0.0` است.


==== تفاوت و ادغام

*`GIT_DIFF_OPTS`* کمی نامناسب است.
        تنها مقادیر معتبر `-u&lt;n&gt;` یا `--unified=&lt;n&gt;` هستند که تعداد خطوط زمینه‌ای را
        که در یک دستور `git diff` نمایش داده می‌شود، کنترل می‌کند.

*`GIT_EXTERNAL_DIFF`* به عنوان یک بازنویسی برای مقدار پیکربندی
        `diff.external` استفاده می‌شود.
        اگر تنظیم شده باشد، گیت این برنامه را هنگام فراخوانی `git diff` فراخوانی خواهد کرد.

*`GIT_DIFF_PATH_COUNTER`* و *`GIT_DIFF_PATH_TOTAL`* از داخل
        برنامه‌ای که توسط `GIT_EXTERNAL_DIFF` یا `diff.external` مشخص شده، مفید هستند.
        اولی نمایانگر این است که کدام فایل در یک سری در حال تفاوت است (از 1 شروع می‌شود) و دومی تعداد کل فایل‌ها در دسته
        است.

*`GIT_MERGE_VERBOSITY`* خروجی استراتژی ادغام بازگشتی را کنترل می‌کند.
        مقادیر مجاز به شرح زیر است:

* 0 هیچ چیزی را خروجی نمی‌دهد، به جز ممکن است یک پیام خطا.
* 1 فقط تضادها را نشان می‌دهد.
* 2 همچنین تغییرات فایل را نشان می‌دهد.
* 3 نشان می‌دهد که فایل‌ها به دلیل عدم تغییر نادیده گرفته شده‌اند.
* 4 تمام مسیرها را در حین پردازش نشان می‌دهد.
* 5 و بالاتر اطلاعات اشکال‌زدایی دقیق را نشان می‌دهد.

مقدار پیش‌فرض 2 است.

==== اشکال‌زدایی

می‌خواهید _واقعاً_ بدانید گیت چه کار می‌کند؟
        گیت مجموعه‌ای نسبتاً کامل از ردیابی‌ها را در خود دارد و تنها کاری که باید انجام دهید این است که آن‌ها را فعال
        کنید.
        مقادیر ممکن این متغیرها به شرح زیر است:

* ``true''، ``1''، یا ``2'' – دسته ردیابی به stderr نوشته می‌شود.
* یک مسیر مطلق که با `/` شروع می‌شود – خروجی ردیابی به آن فایل نوشته می‌شود.

*`GIT_TRACE`* ردیابی‌های عمومی را کنترل می‌کند که در هیچ دسته خاصی قرار نمی‌گیرند.
        این شامل گسترش مستعارها و واگذاری به سایر زیر برنامه‌ها است.

[source,console]
----
$ GIT_TRACE=true git lga
20:12:49.877982 git.c:554               trace: exec: 'git-lga'
20:12:49.878369 run-command.c:341       trace: run_command: 'git-lga'
20:12:49.879529 git.c:282               trace: alias expansion: lga => 'log' '--graph' '--pretty=oneline' '--abbrev-commit' '--decorate' '--all'
20:12:49.879885 run-command.c:349       trace: built-in: git 'log' '--graph' '--pretty=oneline' '--abbrev-commit' '--decorate' '--all'
20:12:49.899217 run-command.c:341       trace: run_command: 'less'
20:12:49.899675 run-command.c:192       trace: exec: 'less'
----

*`GIT_TRACE_PACK_ACCESS`* ردیابی دسترسی به فایل‌های pack را کنترل می‌کند.
        اولین فیلد فایل pack در حال دسترسی است، دومی آفست درون آن فایل:

[source,console]
----
$ GIT_TRACE_PACK_ACCESS=true git status
20:10:12.081397 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 12
20:10:12.081886 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 34662
20:10:12.082115 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 35175
# […]
20:10:12.087398 sha1_file.c:2088        .git/objects/pack/pack-e80e...e3d2.pack 56914983
20:10:12.087419 sha1_file.c:2088        .git/objects/pack/pack-e80e...e3d2.pack 14303666
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
----

*`GIT_TRACE_PACKET`* ردیابی سطح بسته برای عملیات شبکه را فعال می‌کند.

[source,console]
----
$ GIT_TRACE_PACKET=true git ls-remote origin
20:15:14.867043 pkt-line.c:46           packet:          git< # service=git-upload-pack
20:15:14.867071 pkt-line.c:46           packet:          git< 0000
20:15:14.867079 pkt-line.c:46           packet:          git< 97b8860c071898d9e162678ea1035a8ced2f8b1f HEAD\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow no-progress include-tag multi_ack_detailed no-done symref=HEAD:refs/heads/master agent=git/2.0.4
20:15:14.867088 pkt-line.c:46           packet:          git< 0f20ae29889d61f2e93ae00fd34f1cdb53285702 refs/heads/ab/add-interactive-show-diff-func-name
20:15:14.867094 pkt-line.c:46           packet:          git< 36dc827bc9d17f80ed4f326de21247a5d1341fbc refs/heads/ah/doc-gitk-config
# […]
----

*`GIT_TRACE_PERFORMANCE`* کنترل ثبت داده‌های عملکرد را بر عهده دارد.
        خروجی نشان می‌دهد که هر فراخوانی خاص `git` چقدر طول می‌کشد.

[source,console]
----
$ GIT_TRACE_PERFORMANCE=true git gc
20:18:19.499676 trace.c:414             performance: 0.374835000 s: git command: 'git' 'pack-refs' '--all' '--prune'
20:18:19.845585 trace.c:414             performance: 0.343020000 s: git command: 'git' 'reflog' 'expire' '--all'
Counting objects: 170994, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (43413/43413), done.
Writing objects: 100% (170994/170994), done.
Total 170994 (delta 126176), reused 170524 (delta 125706)
20:18:23.567927 trace.c:414             performance: 3.715349000 s: git command: 'git' 'pack-objects' '--keep-true-parents' '--honor-pack-keep' '--non-empty' '--all' '--reflog' '--unpack-unreachable=2.weeks.ago' '--local' '--delta-base-offset' '.git/objects/pack/.tmp-49190-pack'
20:18:23.584728 trace.c:414             performance: 0.000910000 s: git command: 'git' 'prune-packed'
20:18:23.605218 trace.c:414             performance: 0.017972000 s: git command: 'git' 'update-server-info'
20:18:23.606342 trace.c:414             performance: 3.756312000 s: git command: 'git' 'repack' '-d' '-l' '-A' '--unpack-unreachable=2.weeks.ago'
Checking connectivity: 170994, done.
20:18:25.225424 trace.c:414             performance: 1.616423000 s: git command: 'git' 'prune' '--expire' '2.weeks.ago'
20:18:25.232403 trace.c:414             performance: 0.001051000 s: git command: 'git' 'rerere' 'gc'
20:18:25.233159 trace.c:414             performance: 6.112217000 s: git command: 'git' 'gc'
----

*`GIT_TRACE_SETUP`* اطلاعاتی درباره آنچه گیت در حال کشف در مورد مخزن و محیطی که با آن
        تعامل دارد، نشان می‌دهد.

[source,console]
----
$ GIT_TRACE_SETUP=true git status
20:19:47.086765 trace.c:315             setup: git_dir: .git
20:19:47.087184 trace.c:316             setup: worktree: /Users/ben/src/git
20:19:47.087191 trace.c:317             setup: cwd: /Users/ben/src/git
20:19:47.087194 trace.c:318             setup: prefix: (null)
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
----

==== متفرقه

*`GIT_SSH`*، اگر مشخص شده باشد، برنامه‌ای است که به جای `ssh` هنگام تلاش
        گیت برای اتصال به یک میزبان SSH فراخوانی می‌شود.
        این به شکل `$GIT_SSH [username@]host [-p &lt;port&gt;] &lt;command&gt;` فراخوانی می‌شود.
        توجه داشته باشید که این آسان‌ترین راه برای سفارشی کردن نحوه فراخوانی `ssh` نیست؛ این از پارامترهای
        اضافی خط فرمان پشتیبانی نمی‌کند، بنابراین شما باید یک اسکریپت wrapper بنویسید و `GIT_SSH` را به آن
        اشاره کنید.
        احتمالاً بهتر است فقط از فایل `~/.ssh/config` برای این کار استفاده کنید.

*`GIT_ASKPASS`* یک بازنویسی برای مقدار پیکربندی `core.askpass` است.
        این برنامه‌ای است که هر بار که گیت نیاز به درخواست اعتبارنامه از کاربر دارد، فراخوانی می‌شود و می‌تواند انتظار
        یک متن درخواست به عنوان آرگومان خط فرمان را داشته باشد و باید پاسخ را در `stdout` برگرداند.
        (برای اطلاعات بیشتر در مورد این زیرسیستم، به <<_credential_caching#_credential_caching>> مراجعه کنید.)

*`GIT_NAMESPACE`* دسترسی به refs نام‌گذاری شده را کنترل می‌کند و معادل با پرچم `--namespace`
        است.
        این بیشتر در سمت سرور مفید است، جایی که ممکن است بخواهید چندین فورک از یک مخزن واحد را در یک مخزن ذخیره کنید و
        فقط refs را جدا نگه دارید.

*`GIT_FLUSH`* می‌تواند برای مجبور کردن گیت به استفاده از I/O غیر بافر شده هنگام نوشتن
        به تدریج به stdout استفاده شود.
        مقدار 1 باعث می‌شود گیت بیشتر flush کند، و مقدار 0 باعث می‌شود تمام خروجی بافر شود.
        مقدار پیش‌فرض (اگر این متغیر تنظیم نشده باشد) انتخاب یک طرح بافر مناسب بسته به فعالیت و حالت خروجی است.

*`GIT_REFLOG_ACTION`* به شما اجازه می‌دهد متن توصیفی نوشته شده به reflog را مشخص
        کنید.
        در اینجا یک مثال است:

[source,console]
----
$ GIT_REFLOG_ACTION="عمل من" git commit --allow-empty -m 'پیام من'
[master 9e3d55a] پیام من
$ git reflog -1
9e3d55a HEAD@{0}: عمل من: پیام من
----
