=== Environment Variables (متغیرهای محیطی)

 همیشه در یک شِل `bash` اجرا می‌شود و از مجموعه‌ای از متغیرهای محیطی شِل برای تعیین رفتار خود استفاده می‌کند.
گاهی اوقات دانستن این متغیرها و نحوه استفاده از آن‌ها برای کنترل دقیق‌تر Git مفید است.
این فهرست، تمام متغیرهای محیطی مورد توجه Git را شامل نمی‌شود، اما پرکاربردترین و مفیدترین آن‌ها را پوشش می‌دهد.

==== Global Behavior (رفتار سراسری)

برخی از رفتارهای کلی Git به عنوان یک برنامه کامپیوتری، به متغیرهای محیطی بستگی دارد.

*`GIT_EXEC_PATH`* مشخص می‌کند که Git کجا به دنبال زیر‌برنامه‌های خود می‌گردد (مانند `git-commit`، `git-diff` و سایر ابزارها).
برای بررسی مقدار فعلی آن، می‌توانید دستور `git --exec-path` را اجرا کنید.

*`HOME`* معمولاً به‌عنوان متغیری قابل تنظیم در نظر گرفته نمی‌شود (چون بسیاری از چیزهای دیگر به آن وابسته‌اند)، اما Git از این مسیر برای یافتن فایل تنظیمات سراسری (global config) استفاده می‌کند.
اگر بخواهید یک نصب قابل حمل از Git داشته باشید (که شامل تنظیمات سراسری هم باشد)، می‌توانید متغیر HOME را در پروفایل شِل Git قابل حمل تغییر دهید.

*`PREFIX`* مشابه مورد قبلی است، اما برای تنظیمات سراسری سیستم.
Git فایل پیکربندی را در مسیر `$PREFIX/etc/gitconfig` جست‌وجو می‌کند.

*`GIT_CONFIG_NOSYSTEM`* اگر مقداردهی شود، استفاده از فایل پیکربندی سراسری سیستم را غیرفعال می‌کند.
این گزینه زمانی مفید است که تنظیمات سیستم با دستورات شما تداخل دارند، اما شما دسترسی برای تغییر یا حذف آن‌ها ندارید.

*`GIT_PAGER`* برنامه‌ای را مشخص می‌کند که برای نمایش خروجی‌های چند صفحه‌ای در خط فرمان استفاده می‌شود.
اگر این متغیر تنظیم نشده باشد، Git از مقدار `PAGER` استفاده خواهد کرد.

*`GIT_EDITOR`* ویرایشگری را مشخص می‌کند که Git هنگام نیاز به ویرایش متن (مثل پیام کامیت) اجرا می‌کند.
اگر این متغیر تنظیم نشده باشد، Git از مقدار `EDITOR` استفاده خواهد کرد.

==== Repository Locations (موقعیت‌های مخزن) 

Git از چندین متغیر محیطی استفاده می‌کند تا مشخص کند چگونه با مخزن فعلی تعامل داشته باشد.

*`GIT_DIR`* مسیر پوشه `.git` را مشخص می‌کند.
اگر این مقدار تنظیم نشده باشد، Git به صورت بازگشتی درخت دایرکتوری را به سمت بالا پیمایش می‌کند و در هر مرحله به دنبال پوشه‌ای به نام `.git` می‌گردد، تا زمانی که به پوشه‌ی خانگی (`~`) یا ریشه‌ی فایل‌سیستم (`/`) برسد.

*`GIT_CEILING_DIRECTORIES`* رفتار جستجوی پوشه .git را کنترل می‌کند.
اگر در مسیرهایی کار می‌کنید که بارگذاری آن‌ها کند است (مثل درایوهای نواری یا مسیرهای شبکه‌ای کند)، ممکن است بخواهید Git را طوری تنظیم کنید که زودتر از ادامه جستجو صرف‌نظر کند—مخصوصاً اگر Git هنگام ساختن prompt خط فرمان اجرا شود.

*`GIT_WORK_TREE`* مسیر ریشه‌ی دایرکتوری کاری برای یک مخزن غیر‌برهنه (non-bare) را مشخص می‌کند.
اگر `--git-dir` یا متغیر `GIT_DIR` تنظیم شده باشد اما هیچ‌کدام از `--work-tree،` `GIT_WORK_TREE` یا `core.worktree` مشخص نشده باشند، دایرکتوری جاری به عنوان بالاترین سطح دایرکتوری کاری در نظر گرفته می‌شود.

*`GIT_INDEX_FILE`* مسیر فایل ایندکس را مشخص می‌کند (فقط برای مخازن غیر‌برهنه).

*`GIT_OBJECT_DIRECTORY`* می‌تواند برای مشخص کردن مکان دایرکتوری‌ای که معمولاً در .git/objects قرار دارد استفاده شود.

*`GIT_ALTERNATE_OBJECT_DIRECTORIES`* لیستی از مسیرهاست که با دو‌نقطه از هم جدا شده‌اند (مثل: `/dir/one:/dir/two:…`) و به Git می‌گوید اگر شیء مورد نظر در `GIT_OBJECT_DIRECTORY` یافت نشد، کجاهای دیگر را بررسی کند.
اگر پروژه‌های زیادی با فایل‌های حجیم و یکسان دارید، این روش می‌تواند از ذخیره چندباره‌ی آن فایل‌ها جلوگیری کند.

==== Pathspec (مسیرها)

عبارت `pathspec` به نحوه‌ای اشاره دارد که در آن مسیر فایل‌ها را در Git مشخص می‌کنید، از جمله استفاده از کاراکترهای وایلدکارد (wildcards).
این ساختارها هم در فایل `.gitignore` استفاده می‌شوند و هم در دستورات خط فرمان مانند:
`git add *.c`

*`GIT_GLOB_PATHSPECS`* و *`GIT_NOGLOB_PATHSPECS`* رفتار پیش‌فرض استفاده از وایلدکاردها در pathspecs را کنترل می‌کنند.
اگر `GIT_GLOB_PATHSPECS` برابر با 1 تنظیم شده باشد، کاراکترهای وایلدکارد به صورت معمول عمل می‌کنند (که این رفتار پیش‌فرض است). اگر `GIT_NOGLOB_PATHSPECS` برابر با 1 تنظیم شود، کاراکترهای وایلدکارد تنها به خودشان تطابق دارند، به این معنی که چیزی مثل *.c فقط با فایلی که نامش دقیقاً *.c است تطابق خواهد داشت، نه هر فایلی که نامش با .c تمام شود.
شما می‌توانید این رفتار را در موارد خاص با شروع pathspec از `:(glob)` یا `:(literal)` تغییر دهید، مانند `:(glob)*.c`.

*`GIT_LITERAL_PATHSPECS`* هر دو رفتار فوق را غیرفعال می‌کند؛ هیچ کاراکتر وایلدکاردی دیگر عمل نخواهد کرد و پیشوندهای override نیز غیرفعال خواهند شد.

*`GIT_ICASE_PATHSPECS`* باعث می‌شود همه‌ی pathspec ها به صورت حساس به حروف کوچک و بزرگ کار کنند.

==== Committing (کامیت کردن)

در نهایت، ایجاد شیء commit در Git معمولاً توسط `git-commit-tree` انجام می‌شود که از این متغیرهای محیطی به عنوان منبع اصلی اطلاعات استفاده می‌کند و تنها در صورتی که این مقادیر موجود نباشند، به مقادیر تنظیمات پیکربندی رجوع می‌کند.

*`GIT_AUTHOR_NAME`* نام قابل خواندن انسانی برای فیلد `author` است.

*`GIT_AUTHOR_EMAIL`* ایمیل مربوط به فیلد `author` است.

*`GIT_AUTHOR_DATE`* زمان‌سنجی که برای فیلد `author` استفاده می‌شود.

*`GIT_COMMITTER_NAME`* نام انسانی برای فیلد `committer` را تنظیم می‌کند.

*`GIT_COMMITTER_EMAIL`* آدرس ایمیل مربوط به فیلد `committer` است.

*`GIT_COMMITTER_DATE`* برای زمان‌سنجی در فیلد `committer` استفاده می‌شود.

*`EMAIL`* آدرس ایمیل پشتیبان است که در صورتی که مقدار پیکربندی `user.email` تنظیم نشده باشد، از آن استفاده می‌شود.
اگر این مقدار نیز تنظیم نشده باشد، Git به نام‌های کاربری و میزبان سیستم باز می‌گردد.

==== Networking (شبکه)

گیت از کتابخانه curl برای انجام عملیات شبکه‌ای بر روی HTTP استفاده می‌کند، بنابراین GIT_CURL_VERBOSE به گیت می‌گوید که تمام پیام‌های تولید شده توسط این کتابخانه را نمایش دهد. این مشابه اجرای دستور curl -v در خط فرمان است.

*`GIT_SSL_NO_VERIFY`* به گیت می‌گوید که گواهی‌نامه‌های SSL را تأیید نکند. این گاهی اوقات لازم است اگر از گواهی‌نامه خود امضا شده برای سرویس‌دهی به مخازن گیت از طریق HTTPS استفاده می‌کنید، یا در حال راه‌اندازی یک سرور گیت هستید و هنوز گواهی‌نامه کامل نصب نکرده‌اید.

اگر سرعت داده یک عملیات HTTP کمتر از *`GIT_HTTP_LOW_SPEED_LIMIT`* بایت در ثانیه برای مدت زمان بیش از *`GIT_HTTP_LOW_SPEED_TIME`* ثانیه باشد، گیت آن عملیات را قطع می‌کند. این مقادیر بر تنظیمات پیکربندی http.lowSpeedLimit و http.lowSpeedTime ارجحیت دارند.

*`GIT_HTTP_USER_AGENT`* رشته `user-agent` مورد استفاده گیت را هنگام ارتباط از طریق HTTP تنظیم می‌کند. مقدار پیش‌فرض معمولاً چیزی شبیه به `git/2.0.0` است.

==== Diffing and Merging (تفاوت و ادغام)

*`GIT_DIFF_OPTS`* کمی محدود است. تنها مقادیر معتبر برای این متغیر محیطی، `-u<n>` یا `--unified=<n>` هستند که تعداد خطوط زمینه‌ای (context lines) که در دستور `git diff` نمایش داده می‌شود را کنترل می‌کنند.

*`GIT_EXTERNAL_DIFF`* به عنوان جایگزینی برای مقدار پیکربندی `diff.external` عمل می‌کند. اگر تنظیم شده باشد، گیت این برنامه را هنگام فراخوانی `git diff` اجرا خواهد کرد.

*`GIT_DIFF_PATH_COUNTER`* و *`GIT_DIFF_PATH_TOTAL`* بیشتر در داخل برنامه‌ای که توسط `GIT_EXTERNAL_DIFF` یا `diff.external` مشخص شده مفید هستند.

    اولی نشان‌دهنده شماره فایل در یک دسته تفاوت است (شروع از 1).

    دومی تعداد کل فایل‌ها در دسته است.

*`GIT_MERGE_VERBOSITY`* خروجی استراتژی ادغام (merge strategy) را کنترل می‌کند. مقادیر مجاز به شرح زیر است:

    * 0: هیچ چیزی را خروجی نمی‌دهد، به جز ممکن است یک پیام خطا.

    * 1: فقط تضادها (conflicts) را نشان می‌دهد.

    * 2: همچنین تغییرات فایل را نشان می‌دهد.

    * 3: نشان می‌دهد که فایل‌ها به دلیل عدم تغییر نادیده گرفته شده‌اند.

    * 4: تمام مسیرها را در حین پردازش نشان می‌دهد.

    * 5 و بالاتر: اطلاعات اشکال‌زدایی دقیق‌تر را نشان می‌دهد.

مقدار پیش‌فرض برای این متغیر محیطی 2 است.

==== Debugging (اشکال‌زدایی)

می‌خواهید _واقعاً_ بدانید گیت چه کار می‌کند؟
        گیت مجموعه‌ای نسبتاً کامل از ردیابی‌ها را در خود دارد و تنها کاری که باید انجام دهید این است که آن‌ها را فعال
        کنید.
        مقادیر ممکن این متغیرها به شرح زیر است:

* `true`، `1`، یا `2` – دسته ردیابی به stderr نوشته می‌شود.
* یک مسیر مطلق که با `/` شروع می‌شود – خروجی ردیابی به آن فایل نوشته می‌شود.

*`GIT_TRACE`* ردیابی‌های عمومی را کنترل می‌کند که در هیچ دسته خاصی قرار نمی‌گیرند.
        این شامل گسترش مستعارها و واگذاری به سایر زیر برنامه‌ها است.

[source,console]
----
$ GIT_TRACE=true git lga
20:12:49.877982 git.c:554               trace: exec: 'git-lga'
20:12:49.878369 run-command.c:341       trace: run_command: 'git-lga'
20:12:49.879529 git.c:282               trace: alias expansion: lga => 'log' '--graph' '--pretty=oneline' '--abbrev-commit' '--decorate' '--all'
20:12:49.879885 git.c:349               trace: built-in: git 'log' '--graph' '--pretty=oneline' '--abbrev-commit' '--decorate' '--all'
20:12:49.899217 run-command.c:341       trace: run_command: 'less'
20:12:49.899675 run-command.c:192       trace: exec: 'less'
----


*`GIT_TRACE_PACK_ACCESS`* کنترل می‌کند که آیا دسترسی به فایل‌های pack در گیت ردیابی شود یا نه. اولین فیلد، نام فایل pack را نشان می‌دهد که به آن دسترسی پیدا می‌شود، و دومین فیلد، آفست (مکان) داخل آن فایل را نشان می‌دهد. این تنظیم برای اشکال‌زدایی و بررسی عملکرد دسترسی به داده‌ها در فایل‌های pack مفید است.

[source,console]
----
$ GIT_TRACE_PACK_ACCESS=true git status
20:10:12.081397 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 12
20:10:12.081886 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 34662
20:10:12.082115 sha1_file.c:2088        .git/objects/pack/pack-c3fa...291e.pack 35175
# […]
20:10:12.087398 sha1_file.c:2088        .git/objects/pack/pack-e80e...e3d2.pack 56914983
20:10:12.087419 sha1_file.c:2088        .git/objects/pack/pack-e80e...e3d2.pack 14303666
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
----

*`GIT_TRACE_PACKET`* قابلیت رهگیری بسته‌ها در سطح شبکه را برای عملیات‌های گیت فعال می‌کند.

[source,console]
----
$ GIT_TRACE_PACKET=true git ls-remote origin
20:15:14.867043 pkt-line.c:46           packet:          git< # service=git-upload-pack
20:15:14.867071 pkt-line.c:46           packet:          git< 0000
20:15:14.867079 pkt-line.c:46           packet:          git< 97b8860c071898d9e162678ea1035a8ced2f8b1f HEAD\0multi_ack thin-pack side-band side-band-64k ofs-delta shallow no-progress include-tag multi_ack_detailed no-done symref=HEAD:refs/heads/master agent=git/2.0.4
20:15:14.867088 pkt-line.c:46           packet:          git< 0f20ae29889d61f2e93ae00fd34f1cdb53285702 refs/heads/ab/add-interactive-show-diff-func-name
20:15:14.867094 pkt-line.c:46           packet:          git< 36dc827bc9d17f80ed4f326de21247a5d1341fbc refs/heads/ah/doc-gitk-config
# […]
----

*`GIT_TRACE_PERFORMANCE`* کنترل ثبت داده‌های عملکرد را بر عهده دارد.
خروجی نشان می‌دهد که هر فراخوانی خاص git چقدر زمان برده است.

[source,console]
----
$ GIT_TRACE_PERFORMANCE=true git gc
20:18:19.499676 trace.c:414             performance: 0.374835000 s: git command: 'git' 'pack-refs' '--all' '--prune'
20:18:19.845585 trace.c:414             performance: 0.343020000 s: git command: 'git' 'reflog' 'expire' '--all'
Counting objects: 170994, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (43413/43413), done.
Writing objects: 100% (170994/170994), done.
Total 170994 (delta 126176), reused 170524 (delta 125706)
20:18:23.567927 trace.c:414             performance: 3.715349000 s: git command: 'git' 'pack-objects' '--keep-true-parents' '--honor-pack-keep' '--non-empty' '--all' '--reflog' '--unpack-unreachable=2.weeks.ago' '--local' '--delta-base-offset' '.git/objects/pack/.tmp-49190-pack'
20:18:23.584728 trace.c:414             performance: 0.000910000 s: git command: 'git' 'prune-packed'
20:18:23.605218 trace.c:414             performance: 0.017972000 s: git command: 'git' 'update-server-info'
20:18:23.606342 trace.c:414             performance: 3.756312000 s: git command: 'git' 'repack' '-d' '-l' '-A' '--unpack-unreachable=2.weeks.ago'
Checking connectivity: 170994, done.
20:18:25.225424 trace.c:414             performance: 1.616423000 s: git command: 'git' 'prune' '--expire' '2.weeks.ago'
20:18:25.232403 trace.c:414             performance: 0.001051000 s: git command: 'git' 'rerere' 'gc'
20:18:25.233159 trace.c:414             performance: 6.112217000 s: git command: 'git' 'gc'
----

*`GIT_TRACE_SETUP`* اطلاعاتی را درباره آنچه گیت در حال کشف کردن در مورد مخزن و محیطی که با آن تعامل دارد، نمایش می‌دهد.

[source,console]
----
$ GIT_TRACE_SETUP=true git status
20:19:47.086765 trace.c:315             setup: git_dir: .git
20:19:47.087184 trace.c:316             setup: worktree: /Users/ben/src/git
20:19:47.087191 trace.c:317             setup: cwd: /Users/ben/src/git
20:19:47.087194 trace.c:318             setup: prefix: (null)
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
----

==== Miscellaneous (متفرقه)


*`GIT_SSH`* ، اگر مشخص شده باشد، برنامه‌ای است که به جای `ssh` هنگام تلاش گیت برای اتصال به یک میزبان SSH فراخوانی می‌شود.
این به شکل `$GIT_SSH [username@]host [-p <port>] <command>` فراخوانی می‌شود.
توجه داشته باشید که این آسان‌ترین راه برای سفارشی کردن نحوه فراخوانی `ssh` نیست؛ این از پارامترهای اضافی خط فرمان پشتیبانی نمی‌کند، بنابراین شما باید یک اسکریپت wrapper بنویسید و `GIT_SSH` را به آن اشاره کنید.
احتمالاً بهتر است فقط از فایل `~/.ssh/config` برای این کار استفاده کنید.

*`GIT_ASKPASS`* یک بازنویسی برای مقدار پیکربندی `core.askpass` است.
این برنامه‌ای است که هر بار که گیت نیاز به درخواست اعتبارنامه از کاربر دارد، فراخوانی می‌شود و می‌تواند انتظار یک متن درخواست به عنوان آرگومان خط فرمان را داشته باشد و باید پاسخ را در `stdout` برگرداند.
(برای اطلاعات بیشتر در مورد این زیرسیستم، به <<_credential_caching#_credential_caching>> مراجعه کنید.)

*`GIT_NAMESPACE`* دسترسی به refs نام‌گذاری شده را کنترل می‌کند و معادل با پرچم `--namespace` است.
این بیشتر در سمت سرور مفید است، جایی که ممکن است بخواهید چندین فورک از یک مخزن واحد را در یک مخزن ذخیره کنید و فقط refs را جدا نگه دارید.

*`GIT_FLUSH`* می‌تواند برای مجبور کردن گیت به استفاده از I/O غیر بافر شده هنگام نوشتن به تدریج به stdout استفاده شود.
مقدار 1 باعث می‌شود گیت بیشتر flush کند، و مقدار 0 باعث می‌شود تمام خروجی بافر شود.
مقدار پیش‌فرض (اگر این متغیر تنظیم نشده باشد) انتخاب یک طرح بافر مناسب بسته به فعالیت و حالت خروجی است.

*`GIT_REFLOG_ACTION`* به شما اجازه می‌دهد متن توصیفی نوشته شده به reflog را مشخص کنید.
در اینجا یک مثال است:

[source,console]
----
$ GIT_REFLOG_ACTION="my action" git commit --allow-empty -m 'My message'
[master 9e3d55a] My message
$ git reflog -1
9e3d55a HEAD@{0}: my action: My message
----
