[[_custom_importer]]
==== A Custom Importer (واردکننده سفارشی)

(((git commands, fast-import)))
(((Importing, from others)))

 اگر سیستم شما یکی از موارد ذکر شده در بالا نیست، باید به دنبال یک واردکننده آنلاین بگردید – واردکننده‌های با کیفیت برای بسیاری از سیستم‌های دیگر از جمله CVS، Clear Case، Visual Source Safe و حتی یک دایرکتوری از آرشیوها در دسترس هستند. اگر هیچ‌کدام از این ابزارها برای شما کار نمی‌کنند، ابزار نادری دارید یا نیاز به فرآیند واردسازی سفارشی‌تر دارید، باید از git fast-import استفاده کنید. این دستور دستورالعمل‌های ساده‌ای را از stdin می‌خواند تا داده‌های خاص گیت را بنویسد. این روش بسیار راحت‌تر از اجرای دستورات خام گیت یا تلاش برای نوشتن اشیاء خام است (برای اطلاعات بیشتر به <<ch10-git-internals#ch10-git-internals>> مراجعه کنید). به این ترتیب، می‌توانید یک اسکریپت واردسازی بنویسید که اطلاعات لازم را از سیستم واردکننده استخراج کرده و دستورالعمل‌های ساده‌ای را به stdout چاپ کند. سپس می‌توانید این برنامه را اجرا کرده و خروجی آن را از طریق git fast-import منتقل کنید.

برای نمایش سریع، شما یک واردکننده ساده می‌نویسید.
فرض کنید شما در دایرکتوری current کار می‌کنید، پروژه خود را با کپی کردن گاه به گاه دایرکتوری به دایرکتوری پشتیبان با زمان‌بندی back_YYYY_MM_DD پشتیبان‌گیری می‌کنید و می‌خواهید این را به گیت وارد کنید.
ساختار دایرکتوری شما به این شکل است:

[source,console]
----
$ ls /opt/import_from
back_2014_01_02
back_2014_01_04
back_2014_01_14
back_2014_02_03
current
----

برای وارد کردن یک دایرکتوری گیت، باید نحوه ذخیره‌سازی داده‌ها در گیت را بررسی کنید.
همانطور که ممکن است به یاد داشته باشید، گیت اساساً یک لیست پیوندی از اشیاء کامیت است که به یک snapshot از محتویات اشاره دارند.
تمام کاری که باید انجام دهید این است که به `fast-import` بگویید که snapshotهای محتویات کجا هستند، داده‌های کامیت به کدام‌ یک اشاره می‌کنند، و ترتیب آن‌ها چگونه است.
استراتژی شما این خواهد بود که به‌طور تک‌تک از میان snapshotها عبور کنید و برای محتویات هر دایرکتوری کامیت ایجاد کرده و هر کامیت را به کامیت قبلی متصل کنید.

همانطور که در <<ch08-customizing-git#_an_example_git_enforced_policy>> انجام دادیم، این را در Ruby می‌نویسیم، چون این زبان معمولاً آنچه که با آن کار می‌کنیم است و خواندن آن راحت‌تر است.
شما می‌توانید این مثال را به راحتی در هر زبان دیگری که با آن آشنا هستید بنویسید – تنها باید اطلاعات مناسب را به `stdout` چاپ کند.
و اگر در ویندوز کار می‌کنید، باید دقت ویژه‌ای داشته باشید که در انتهای خطوط کاراکتر بازگشتی (carriage return) اضافه نکنید – `git fast-import` خیلی خاص است و فقط به خط‌خورهای (LF) نیاز دارد نه بازگشت‌خط‌های (CRLF) ویندوز.

برای شروع، شما باید وارد دایرکتوری هدف شوید و هر زیر دایرکتوری را شناسایی کنید، که هر کدام یک snapshot است که می‌خواهید به عنوان یک کامیت وارد کنید.
سپس وارد هر زیر دایرکتوری می‌شوید و دستورات لازم برای صادر کردن آن را چاپ می‌کنید.
حلقه اصلی شما به شکل زیر خواهد بود:

[source,ruby]
----
last_mark = nil

# loop through the directories
Dir.chdir(ARGV[0]) do
  Dir.glob("*").each do |dir|
    next if File.file?(dir)

    # move into the target directory
    Dir.chdir(dir) do
      last_mark = print_export(dir, last_mark)
    end
  end
end
----

شما دستور `print_export` را در داخل هر دایرکتوری اجرا می‌کنید، که منیفست و مارک snapshot قبلی را می‌گیرد و منیفست و مارک این snapshot را باز می‌گرداند؛ به این ترتیب، می‌توانید آن‌ها را به درستی به هم متصل کنید.
`Mark` اصطلاحی است در `fast-import` برای شناسه‌ای که به یک کامیت می‌دهید؛ زمانی که کامیت‌ها را ایجاد می‌کنید، به هرکدام یک مارک می‌دهید که می‌توانید از آن برای لینک کردن به آن کامیت‌ها از کامیت‌های دیگر استفاده کنید.
بنابراین، اولین کاری که باید در متد `print_export` خود انجام دهید این است که یک مارک از نام دایرکتوری ایجاد کنید:

[source,ruby]
----
mark = convert_dir_to_mark(dir)
----

شما این کار را با ایجاد یک آرایه از دایرکتوری‌ها و استفاده از مقدار ایندکس به‌عنوان مارک انجام خواهید داد، زیرا مارک باید یک عدد صحیح (integer) باشد.
متد شما به شکل زیر خواهد بود:

[source,ruby]
----
$marks = []
def convert_dir_to_mark(dir)
  if !$marks.include?(dir)
    $marks << dir
  end
  ($marks.index(dir) + 1).to_s
end
----

حال که نمایه عددی از کامیت خود دارید، به یک تاریخ برای داده‌های متا-داده کامیت نیاز دارید.
زیرا تاریخ در نام دایرکتوری بیان شده است، بنابراین باید آن را استخراج کنید.
خط بعدی در فایل `print_export` شما به شکل زیر خواهد بود:

[source,ruby]
----
date = convert_dir_to_date(dir)
----

جایی که `convert_dir_to_date` به این شکل تعریف شده است:

[source,ruby]
----
def convert_dir_to_date(dir)
  if dir == 'current'
    return Time.now().to_i
  else
    dir = dir.gsub('back_', '')
    (year, month, day) = dir.split('_')
    return Time.local(year, month, day).to_i
  end
end
----

این مقدار یک عدد صحیح برای تاریخ هر دایرکتوری برمی‌گرداند.
آخرین بخش از اطلاعات متا که برای هر کامیت نیاز دارید، داده‌های فرستنده (committer) است که آن را در یک متغیر سراسری (global variable) به صورت ثابت تنظیم می‌کنید:

[source,ruby]
----
$author = 'John Doe <john@example.com>'
----

اکنون شما آماده‌اید که داده‌های کامیت را برای واردکننده خود چاپ کنید.
اطلاعات اولیه بیان می‌کند که شما یک شیء کامیت را تعریف می‌کنید و بیان می‌کنید که در کدام شاخه است، سپس مارک تولید شده، اطلاعات کامیت‌کننده و پیام کامیت را درج کرده و در نهایت کامیت قبلی را، در صورت وجود، اضافه می‌کنید.
کد به این صورت خواهد بود:

[source,ruby]
----
# print the import information
puts 'commit refs/heads/master'
puts 'mark :' + mark
puts "committer #{$author} #{date} -0700"
export_data('imported from ' + dir)
puts 'from :' + last_mark if last_mark
----

شما منطقه زمانی (-0700) را به صورت ثابت تنظیم می‌کنید زیرا انجام این کار ساده است.
اگر از سیستم دیگری وارد می‌کنید، باید منطقه زمانی را به صورت یک آفست مشخص کنید.
پیام کامیت باید در یک فرمت خاص بیان شود:

[source]
----
data (size)\n(contents)
----

فرمت شامل کلمه data، اندازه داده‌ای که باید خوانده شود، یک خط جدید، و در نهایت خود داده‌ها است.
زیرا شما باید از همین فرمت برای مشخص کردن محتویات فایل‌ها در مراحل بعدی استفاده کنید، بنابراین یک متد کمکی به نام `export_data` ایجاد می‌کنید:


[source,ruby]
----
def export_data(string)
  print "data #{string.size}\n#{string}"
end
----

تمام چیزی که باقی مانده، مشخص کردن محتویات فایل‌ها برای هر snapshot است.
این کار ساده است، زیرا شما هر کدام را در یک دایرکتوری دارید – می‌توانید دستور `deleteall` را چاپ کرده و سپس محتویات هر فایل در دایرکتوری را دنبال کنید.
گیت سپس هر snapshot را به‌طور مناسب ثبت خواهد کرد:

[source,ruby]
----
puts 'deleteall'
Dir.glob("**/*").each do |file|
  next if !File.file?(file)
  inline_data(file)
end
----

توجه داشته باشید: چون بسیاری از سیستم‌ها تغییرات خود را به‌عنوان تغییرات بین یک کامیت و کامیت دیگر می‌بینند، `fast-import` همچنین می‌تواند دستوراتی برای هر کامیت دریافت کند که مشخص می‌کند کدام فایل‌ها اضافه، حذف یا تغییر یافته‌اند و محتویات جدید آن‌ها چیست.
شما می‌توانید تفاوت‌ها بین snapshotها را محاسبه کرده و فقط این داده‌ها را فراهم کنید، اما این کار پیچیده‌تر است – بهتر است تمام داده‌ها را به گیت بدهید و بگذارید خودش این کار را انجام دهد.
اگر این روش برای داده‌های شما مناسب‌تر است، برای جزئیات بیشتر در مورد نحوه ارائه داده‌ها به این شیوه، صفحه راهنمای `fast-import` را بررسی کنید.

فرمت برای فهرست کردن محتویات فایل‌های جدید یا مشخص کردن یک فایل تغییر یافته با محتویات جدید به شکل زیر است:
[source]
----
M 644 inline path/to/file
data (size)
(file contents)
----

در اینجا، 644 حالت فایل است (اگر فایل‌های اجرایی دارید، باید آن‌ها را شناسایی کرده و 755 را به جای آن مشخص کنید)، و inline می‌گوید که شما محتویات فایل را بلافاصله پس از این خط فهرست خواهید کرد.
متد `inline_data` شما به شکل زیر خواهد بود:

[source,ruby]
----
def inline_data(file, code = 'M', mode = '644')
  content = File.read(file)
  puts "#{code} #{mode} inline #{file}"
  export_data(content)
end
----

شما از متد `export_data` که قبلاً تعریف کرده‌اید دوباره استفاده می‌کنید، زیرا این روش مشابه روش مشخص کردن داده‌های پیام کامیت شما است.

آخرین کاری که باید انجام دهید این است که مارک فعلی را برگردانید تا بتوانید آن را به تکرار بعدی منتقل کنید:

[source,ruby]
----
return mark
----

[NOTE]
====

اگر شما در حال اجرای این کد در ویندوز هستید، باید مطمئن شوید که یک مرحله اضافی اضافه کنید.
همانطور که قبلاً اشاره شد، ویندوز از CRLF برای کاراکترهای خط جدید استفاده می‌کند، در حالی که `git fast-import` تنها انتظار دارد که از LF استفاده شود.
برای دور زدن این مشکل و راضی نگه داشتن git fast-import، باید به روبی بگویید که از LF به جای CRLF استفاده کند:

[source,ruby]
----
$stdout.binmode
----
====

این تمام چیزی است که نیاز دارید.
در اینجا اسکریپت به طور کامل آمده است:

[source,ruby]
----
#!/usr/bin/env ruby

$stdout.binmode
$author = "John Doe <john@example.com>"

$marks = []
def convert_dir_to_mark(dir)
    if !$marks.include?(dir)
        $marks << dir
    end
    ($marks.index(dir)+1).to_s
end

def convert_dir_to_date(dir)
    if dir == 'current'
        return Time.now().to_i
    else
        dir = dir.gsub('back_', '')
        (year, month, day) = dir.split('_')
        return Time.local(year, month, day).to_i
    end
end

def export_data(string)
    print "data #{string.size}\n#{string}"
end

def inline_data(file, code='M', mode='644')
    content = File.read(file)
    puts "#{code} #{mode} inline #{file}"
    export_data(content)
end

def print_export(dir, last_mark)
    date = convert_dir_to_date(dir)
    mark = convert_dir_to_mark(dir)

    puts 'commit refs/heads/master'
    puts "mark :#{mark}"
    puts "committer #{$author} #{date} -0700"
    export_data("imported from #{dir}")
    puts "from :#{last_mark}" if last_mark

    puts 'deleteall'
    Dir.glob("**/*").each do |file|
        next if !File.file?(file)
        inline_data(file)
    end
    mark
end

# Loop through the directories
last_mark = nil
Dir.chdir(ARGV[0]) do
    Dir.glob("*").each do |dir|
        next if File.file?(dir)

        # move into the target directory
        Dir.chdir(dir) do
            last_mark = print_export(dir, last_mark)
        end
    end
end
----

اگر این اسکریپت را اجرا کنید، محتوای خروجی به این شکل خواهد بود:

[source,console]
----
$ ruby import.rb /opt/import_from
commit refs/heads/master
mark :1
committer John Doe <john@example.com> 1388649600 -0700
data 29
imported from back_2014_01_02deleteall
M 644 inline README.md
data 28
# Hello

This is my readme.
commit refs/heads/master
mark :2
committer John Doe <john@example.com> 1388822400 -0700
data 29
imported from back_2014_01_04from :1
deleteall
M 644 inline main.rb
data 34
#!/bin/env ruby

puts "Hey there"
M 644 inline README.md
(...)
----

برای اجرای واردکننده، این خروجی را از طریق `git fast-import` در دایرکتوری گیت که می‌خواهید وارد کنید، پایپ کنید.
شما می‌توانید یک دایرکتوری جدید ایجاد کرده و سپس دستور git init را در آن اجرا کنید تا نقطه شروعی داشته باشید، سپس اسکریپت خود را اجرا کنید:

[source,console]
----
$ git init
Initialized empty Git repository in /opt/import_to/.git/
$ ruby import.rb /opt/import_from | git fast-import
git-fast-import statistics:
---------------------------------------------------------------------
Alloc'd objects:       5000
Total objects:           13 (         6 duplicates                  )
      blobs  :            5 (         4 duplicates          3 deltas of          5 attempts)
      trees  :            4 (         1 duplicates          0 deltas of          4 attempts)
      commits:            4 (         1 duplicates          0 deltas of          0 attempts)
      tags   :            0 (         0 duplicates          0 deltas of          0 attempts)
Total branches:           1 (         1 loads     )
      marks:           1024 (         5 unique    )
      atoms:              2
Memory total:          2344 KiB
       pools:          2110 KiB
     objects:           234 KiB
---------------------------------------------------------------------
pack_report: getpagesize()            =       4096
pack_report: core.packedGitWindowSize = 1073741824
pack_report: core.packedGitLimit      = 8589934592
pack_report: pack_used_ctr            =         10
pack_report: pack_mmap_calls          =          5
pack_report: pack_open_windows        =          2 /          2
pack_report: pack_mapped              =       1457 /       1457
---------------------------------------------------------------------
----

همانطور که می‌بینید، زمانی که این فرآیند با موفقیت تکمیل می‌شود، به شما تعدادی آمار در مورد کارهایی که انجام شده است، ارائه می‌دهد.
در این حالت، شما ۱۳ شیء به‌طور کلی برای ۴ کامیت به یک شاخه وارد کرده‌اید.
اکنون می‌توانید دستور `git log` را اجرا کنید تا تاریخچه جدید خود را مشاهده کنید:

[source,console]
----
$ git log -2
commit 3caa046d4aac682a55867132ccdfbe0d3fdee498
Author: John Doe <john@example.com>
Date:   Tue Jul 29 19:39:04 2014 -0700

    imported from current

commit 4afc2b945d0d3c8cd00556fbe2e8224569dc9def
Author: John Doe <john@example.com>
Date:   Mon Feb 3 01:00:00 2014 -0700

    imported from back_2014_02_03
----

حالا یک مخزن گیت تمیز و مرتب دارید.
مهم است که توجه داشته باشید که هیچ چیزی چک‌اوت نشده است – در ابتدا هیچ فایلی در دایرکتوری کاری شما وجود ندارد.
برای دریافت فایل‌ها، باید شاخه خود را به جایی که `master` اکنون قرار دارد، ریست کنید:

[source,console]
----
$ ls
$ git reset --hard master
HEAD is now at 3caa046 imported from current
$ ls
README.md main.rb
----

شما می‌توانید با ابزار `fast-import` کارهای بیشتری انجام دهید – مدیریت حالت‌های مختلف، داده‌های باینری، شاخه‌های متعدد و ادغام‌ها، تگ‌ها، نشانگرهای پیشرفت و موارد دیگر.
چندین مثال از سناریوهای پیچیده‌تر در دایرکتوری `contrib/fast-import` کد منبع گیت موجود است.
