[[_git_tfs]]
==== TFS

(((TFS)))(((Importing, from TFS)))

اگر تیم شما در حال تبدیل کنترل نسخه خود از TFVC به Git است، شما به یک تبدیل با بالاترین دقت نیاز دارید. این به این معناست که، در حالی که ما هم `git-tfs` و هم `git-tf` را برای بخش ارتباط متقابل بررسی کردیم، در این بخش فقط `git-tfs` را پوشش خواهیم داد، زیرا `git-tfs` از شاخه‌ها پشتیبانی می‌کند، و انجام این کار با استفاده از `git-tf` به طور غیرقابل تحملی دشوار است.

[NOTE]
====
این یک تبدیل یک‌طرفه است. مخزن Git نتیجه‌گیری شده قادر نخواهد بود به پروژه اصلی TFVC متصل شود.
====

اولین کاری که باید انجام دهید، نگاشت نام‌های کاربری است. TFVC نسبتاً آزاد است در مورد اینکه چه چیزی در فیلد نویسنده برای تغییرات وارد شود، اما Git به یک نام قابل‌خواندن و آدرس ایمیل نیاز دارد. شما می‌توانید این اطلاعات را از طریق کلاینت خط فرمان `tf` به دست آورید، به این صورت:

[source,powershell]
----
PS> tf history $/myproject -recursive > AUTHORS_TMP
----

این دستور تمام تغییرات در تاریخچه پروژه را جمع‌آوری می‌کند و آن را در فایل `AUTHORS_TMP` قرار می‌دهد که ما برای استخراج داده‌های ستون 'User' (دومین ستون) آن را پردازش خواهیم کرد. فایل را باز کنید و پیدا کنید که ستون از کدام کاراکترها شروع و تمام می‌شود، سپس در دستور خط فرمان زیر، پارامترهای `11-20` دستور `cut` را با مقادیری که پیدا کرده‌اید جایگزین کنید:

[source,powershell]
----
PS> cat AUTHORS_TMP | cut -b 11-20 | tail -n+3 | sort | uniq > AUTHORS
----

دستور `cut` تنها کاراکترهای بین 11 و 20 هر خط را نگه می‌دارد. دستور `tail` دو خط اول را که شامل هدرهای فیلد و خط‌های زیرنویس `ASCII` هستند، نادیده می‌گیرد. نتیجه تمام این‌ها به دستور `sort` و سپس `uniq` ارسال می‌شود تا تکراری‌ها حذف شوند و در فایلی به نام `AUTHORS` ذخیره می‌شود. گام بعدی دستی است؛ برای اینکه `git-tfs` به طور مؤثر از این فایل استفاده کند، هر خط باید به این فرمت باشد:

[source,text]
----
DOMAIN\username = User Name <email@address.com>
----

بخش سمت چپ فیلد `User` از `TFVC` است، و بخش سمت راست علامت مساوی نام کاربری است که برای commitهای Git استفاده خواهد شد.

زمانی که این فایل را داشته باشید، گام بعدی این است که یک کلون کامل از پروژه TFVC که به آن علاقه دارید، ایجاد کنید:

[source,powershell]
----
PS> git tfs clone --with-branches --authors=AUTHORS https://username.visualstudio.com/DefaultCollection $/project/Trunk project_git
----

در مرحله بعد، شما باید بخش‌های `git-tfs-id` را از انتهای پیغام‌های commit پاک کنید. دستور زیر این کار را انجام می‌دهد:

[source,powershell]
----
PS> git filter-branch -f --msg-filter 'sed "s/^git-tfs-id:.*$//g"' '--' --all
----

این دستور از دستور `sed` در محیط Git-bash استفاده می‌کند تا هر خطی که با `git-tfs-id:` شروع می‌شود را با فضای خالی جایگزین کند، که سپس توسط Git نادیده گرفته می‌شود.

زمانی که این مراحل انجام شد، شما آماده‌اید تا یک remote جدید اضافه کنید، تمام شاخه‌های خود را push کنید و تیم شما از Git شروع به کار کند.
