==== Git and Mercurial (گیت و مرکیوریال)

(((Interoperation with other VCSs, Mercurial)))
(((Mercurial)))
دنیای سیستم‌های کنترل نسخه توزیع‌شده (DVCS) بزرگ‌تر از فقط گیت است.
در واقع، سیستم‌های زیادی در این فضا وجود دارند که هرکدام رویکرد خاص خود را برای انجام کنترل نسخه توزیع‌شده به‌طور صحیح دارند.
علاوه بر گیت، مرکیوریال محبوب‌ترین سیستم در این فضا است و این دو در بسیاری از جنبه‌ها شباهت زیادی به هم دارند.

خبر خوب این است که اگر شما رفتار کلاینت-سمت گیت را ترجیح می‌دهید اما با پروژه‌ای کار می‌کنید که کد منبع آن با مرکیوریال کنترل می‌شود، راهی وجود دارد که از گیت به‌عنوان یک کلاینت برای مخزن میزبان‌شده با مرکیوریال استفاده کنید.
از آنجا که گیت از طریق ریموت‌ها با مخازن سرور ارتباط برقرار می‌کند، این پل به‌عنوان یک ابزار کمکی ریموت پیاده‌سازی شده است.
نام پروژه git-remote-hg است و می‌توانید آن را در آدرس https://github.com/felipec/git-remote-hg[] پیدا کنید.
===== git-remote-hg

اولین قدم این است که git-remote-hg را نصب کنید.
این کار اساساً به این معناست که فایل آن را در مکانی از مسیر خود قرار دهید، به‌طور مثال:
[source,console]
----
$ curl -o ~/bin/git-remote-hg \
  https://raw.githubusercontent.com/felipec/git-remote-hg/master/git-remote-hg
$ chmod +x ~/bin/git-remote-hg
----

… فرض بر این است که `~/bin` در متغیر `$PATH` شما قرار دارد.
گیت-ریموت-اچ‌جی یک وابستگی دیگر نیز دارد: کتابخانه `mercurial` برای پایتون.
اگر پایتون نصب شده باشد، این کار به سادگی با دستور زیر انجام می‌شود:


[source,console]
----
$ pip install mercurial
----
(اگر پایتون نصب نکرده‌اید، به آدرس https://www.python.org/[] بروید و ابتدا آن را نصب کنید.)

آخرین چیزی که به آن نیاز دارید، کلاینت مرکیوریال است.
به آدرس https://www.mercurial-scm.org/[] بروید و آن را نصب کنید اگر هنوز این کار را نکرده‌اید.

حالا شما آماده هستید که شروع کنید.
تنها چیزی که نیاز دارید، یک مخزن مرکیوریال است که بتوانید به آن پوش کنید.
خوشبختانه، هر مخزن مرکیوریال می‌تواند به این صورت عمل کند، بنابراین ما فقط از مخزن "hello world" که همه برای یادگیری مرکیوریال از آن استفاده می‌کنند، استفاده خواهیم کرد:
[source,console]
----
$ hg clone http://selenic.com/repo/hello /tmp/hello
----

===== Getting Started (شروع)

حالا که یک مخزن مناسب "سمت سرور" داریم، می‌توانیم یک روند کاری معمولی را بررسی کنیم.
همان‌طور که خواهید دید، این دو سیستم آن‌قدر مشابه هستند که هیچ‌گونه مشکلی در استفاده از آن‌ها وجود ندارد.

همانطور که همیشه در گیت داریم، ابتدا مخزن را کلون می‌کنیم:
[source,console]
----
$ git clone hg::/tmp/hello /tmp/hello-git
$ cd /tmp/hello-git
$ git log --oneline --graph --decorate
* ac7955c (HEAD, origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master, master) Create a makefile
* 65bb417 Create a standard 'hello, world' program
----

شما متوجه خواهید شد که کار کردن با یک مخزن مرکیوریال از دستور استاندارد `git clone` استفاده می‌کند.
این به این دلیل است که `git-remote-hg` در سطح نسبتاً پایین‌تری عمل می‌کند، به طوری که از مکانیزمی مشابه با نحوه پیاده‌سازی پروتکل HTTP/S گیت (ابزارهای کمکی ریموت) استفاده می‌کند.
از آنجا که گیت و مرکیوریال هر دو به گونه‌ای طراحی شده‌اند که هر کلاینت یک کپی کامل از تاریخچه مخزن داشته باشد، این دستور یک کلون کامل می‌سازد، شامل تمام تاریخچه پروژه، و این کار را نسبتاً سریع انجام می‌دهد.

دستور log دو کمیت را نشان می‌دهد که آخرین آن‌ها توسط مجموعه‌ای از مراجع به آن اشاره شده است.
متوجه می‌شویم که برخی از این مراجع در واقع وجود ندارند.
بیایید نگاهی به آنچه که در دایرکتوری `.git` قرار دارد بیندازیم:

[source,console]
----
$ tree .git/refs
.git/refs
├── heads
│   └── master
├── hg
│   └── origin
│       ├── bookmarks
│       │   └── master
│       └── branches
│           └── default
├── notes
│   └── hg
├── remotes
│   └── origin
│       └── HEAD
└── tags

9 directories, 5 files
----

گیت-ریموت-اچ‌جی سعی دارد که کارها را به شیوه‌ای شبیه به گیت انجام دهد، اما در پشت‌صحنه در حال مدیریت نقشه‌برداری مفهومی بین دو سیستم کمی متفاوت است.
دایرکتوری `refs/hg` جایی است که مراجع ریموت واقعی ذخیره می‌شوند.
برای مثال، refs/hg/origin/branches/default یک فایل مرجع گیت است که SHA-1 آن با ac7955c شروع می‌شود، که همان کمیتی است که master به آن اشاره دارد.
بنابراین، دایرکتوری `refs/hg` شبیه به یک `refs/remotes/origin` جعلی است، اما تفاوت اضافی‌ای بین بوک‌مارک‌ها و شاخه‌ها دارد.

فایل `notes/hg` نقطه شروعی برای نحوه‌ی نقشه‌برداری گیت-ریموت-اچ‌جی از هش‌های کمیت گیت به شناسه‌های تغییرات مرکیوریال است.
بیایید کمی بیشتر کاوش کنیم:
[source,console]
----
$ cat notes/hg
d4c10386...

$ git cat-file -p d4c10386...
tree 1781c96...
author remote-hg <> 1408066400 -0800
committer remote-hg <> 1408066400 -0800

Notes for master

$ git ls-tree 1781c96...
100644 blob ac9117f...	65bb417...
100644 blob 485e178...	ac7955c...

$ git cat-file -p ac9117f
0a04b987be5ae354b710cefeba0e2d9de7ad41a9
----

بنابراین `refs/notes/hg` به یک درخت اشاره دارد، که در پایگاه داده اشیاء گیت، لیستی از اشیاء دیگر با نام‌ها است. دستور `git ls-tree` وضعیت، نوع، هش شیء و نام فایل برای آیتم‌های داخل یک درخت را نمایش می‌دهد. زمانی که به یکی از آیتم‌های درخت می‌پردازیم، متوجه می‌شویم که داخل آن یک blob به نام ac9117f (هش SHA-1 کمیتی که به وسیله `master` اشاره شده است) وجود دارد، که محتوای آن 0a04b98 (که شناسه تغییرات Mercurial در نوک شاخه `default` است) می‌باشد.

خبر خوب این است که بیشتر وقت‌ها نیازی نیست نگران این موضوعات باشیم. روند کاری معمول معمولاً تفاوت زیادی با کار کردن با یک ریموت گیت نخواهد داشت.

یک چیز دیگر وجود دارد که قبل از ادامه باید به آن توجه کنیم: فایل‌های نادیده گرفته شده (ignores). Mercurial و Git از مکانیزم بسیار مشابهی برای این کار استفاده می‌کنند، اما احتمالاً نمی‌خواهید که واقعاً یک فایل `.gitignore` را به یک مخزن Mercurial اضافه کنید. خوشبختانه، Git روشی برای نادیده گرفتن فایل‌ها دارد که مخصوص یک مخزن محلی است، و فرمت Mercurial با Git سازگار است، بنابراین شما فقط باید آن را کپی کنید:
[source,console]
----
$ cp .hgignore .git/info/exclude
----

فایل `.git/info/exclude` دقیقا مانند یک `.gitignore` عمل می‌کند، اما در کامیت‌ها گنجانده نمی‌شود.

===== Workflow (روند کاری)

فرض کنیم که ما مقداری کار انجام داده‌ایم و چند کامیت در شاخه master ایجاد کرده‌ایم و حالا آماده‌ایم که آن را به مخزن ریموت ارسال کنیم. در حال حاضر مخزن ما به این شکل است:

[source,console]
----
$ git log --oneline --graph --decorate
* ba04a2a (HEAD, master) Update makefile
* d25d16f Goodbye
* ac7955c (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Create a makefile
* 65bb417 Create a standard 'hello, world' program
----

شاخه `master` ما دو کامیت جلوتر از `origin/master` است، اما این دو کامیت فقط بر روی دستگاه محلی ما وجود دارند. بیایید ببینیم آیا کسی دیگری هم به طور همزمان کار مهمی انجام داده است:
[source,console]
----
$ git fetch
From hg::/tmp/hello
   ac7955c..df85e87  master     -> origin/master
   ac7955c..df85e87  branches/default -> origin/branches/default
$ git log --oneline --graph --decorate --all
* 7b07969 (refs/notes/hg) Notes for default
* d4c1038 Notes for master
* df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation
| * ba04a2a (HEAD, master) Update makefile
| * d25d16f Goodbye
|/
* ac7955c Create a makefile
* 65bb417 Create a standard 'hello, world' program
----

از آنجایی که از فلگ `--all` استفاده کردیم، رفرنس‌های `notes` که به طور داخلی توسط `git-remote-hg` استفاده می‌شوند را می‌بینیم، اما می‌توانیم آن‌ها را نادیده بگیریم. بقیه موارد همانطور که انتظار می‌رفت، `origin/master` با یک کامیت پیش رفته است و تاریخچه ما اکنون از هم جدا شده است. برخلاف سیستم‌های دیگری که در این فصل با آن‌ها کار می‌کنیم، Mercurial قادر به مدیریت ادغام‌ها (merges) است، بنابراین ما نیازی به انجام کار خاصی نداریم.
[source,console]
----
$ git merge origin/master
Auto-merging hello.c
Merge made by the 'recursive' strategy.
 hello.c | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
$ git log --oneline --graph --decorate
*   0c64627 (HEAD, master) Merge remote-tracking branch 'origin/master'
|\
| * df85e87 (origin/master, origin/branches/default, origin/HEAD, refs/hg/origin/branches/default, refs/hg/origin/bookmarks/master) Add some documentation
* | ba04a2a Update makefile
* | d25d16f Goodbye
|/
* ac7955c Create a makefile
* 65bb417 Create a standard 'hello, world' program
----

عالی است. ما تست‌ها را اجرا می‌کنیم و همه آن‌ها با موفقیت عبور می‌کنند، بنابراین آماده‌ایم تا کار خود را با بقیه تیم به اشتراک بگذاریم:

[source,console]
----
$ git push
To hg::/tmp/hello
   df85e87..0c64627  master -> master
----

تمام شد! اگر به مخزن Mercurial نگاهی بیندازید، خواهید دید که این همان چیزی بود که انتظار داشتیم:
[source,console]
----
$ hg log -G --style compact
o    5[tip]:4,2   dc8fa4f932b8   2014-08-14 19:33 -0700   ben
|\     Merge remote-tracking branch 'origin/master'
| |
| o  4   64f27bcefc35   2014-08-14 19:27 -0700   ben
| |    Update makefile
| |
| o  3:1   4256fc29598f   2014-08-14 19:27 -0700   ben
| |    Goodbye
| |
@ |  2   7db0b4848b3c   2014-08-14 19:30 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard 'hello, world' program
----

تغییرات شماره‌گذاری شده 2 توسط Mercurial ایجاد شده است، و تغییرات شماره‌گذاری شده 3 و 4 توسط `git-remote-hg` ایجاد شده‌اند، که با ارسال کامیت‌های انجام شده با Git به وجود آمده‌اند.
===== Branches and Bookmarks (شاخه‌ها و بوک‌مارک‌ها)

گیت تنها یک نوع شاخه دارد: یک ارجاع که هنگام ایجاد کامیت‌ها جابجا می‌شود. در Mercurial، این نوع ارجاع `bookmark` نامیده می‌شود و رفتار آن تقریباً مشابه شاخه در گیت است.

مفهوم `branch` در Mercurial سنگین‌تر است. شاخه‌ای که یک تغییرات (changeset) بر روی آن ایجاد می‌شود، با تغییرات ذخیره می‌شود، که به این معنی است که همیشه در تاریخچه مخزن خواهد بود. در اینجا یک مثال از یک کامیت که بر روی شاخه develop ایجاد شده است آورده شده:

[source,console]
----
$ hg log -l 1
changeset:   6:8f65e5e02793
branch:      develop
tag:         tip
user:        Ben Straub <ben@straub.cc>
date:        Thu Aug 14 20:06:38 2014 -0700
summary:     More documentation
----

به خطی که با `branch` شروع می‌شود توجه کنید. گیت واقعاً نمی‌تواند این را شبیه‌سازی کند (و نیازی هم به آن ندارد؛ هر دو نوع شاخه می‌توانند به عنوان یک مرجع گیت نمایش داده شوند)، اما `git-remote-hg` باید تفاوت را درک کند، زیرا Mercurial اهمیت می‌دهد.

ساخت بوک‌مارک‌های Mercurial به راحتی ایجاد شاخه‌های گیت است. در طرف گیت:
[source,console]
----
$ git checkout -b featureA
Switched to a new branch 'featureA'
$ git push origin featureA
To hg::/tmp/hello
 * [new branch]      featureA -> featureA
----

همین است. در طرف Mercurial، اینطور به نظر می‌رسد:

[source,console]
----
$ hg bookmarks
   featureA                  5:bd5ac26f11f9
$ hg log --style compact -G
@  6[tip]   8f65e5e02793   2014-08-14 20:06 -0700   ben
|    More documentation
|
o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 20:02 -0700   ben
|\     Merge remote-tracking branch 'origin/master'
| |
| o  4   0434aaa6b91f   2014-08-14 20:01 -0700   ben
| |    update makefile
| |
| o  3:1   318914536c86   2014-08-14 20:00 -0700   ben
| |    goodbye
| |
o |  2   f098c7f45c4f   2014-08-14 20:01 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard 'hello, world' program
----

به تگ جدید [featureA] در بازبینی 5 توجه کنید. این‌ها دقیقاً مانند شاخه‌های گیت در طرف گیت عمل می‌کنند، با یک استثنا: شما نمی‌توانید یک بوک‌مارک را از طرف گیت حذف کنید (این یک محدودیت در کمک‌کننده‌های ریموت است).

شما همچنین می‌توانید بر روی یک شاخه "سنگین‌" Mercurial کار کنید: فقط کافی است که یک شاخه را در فضای نام `branches` قرار دهید:
[source,console]
----
$ git checkout -b branches/permanent
Switched to a new branch 'branches/permanent'
$ vi Makefile
$ git commit -am 'A permanent change'
$ git push origin branches/permanent
To hg::/tmp/hello
 * [new branch]      branches/permanent -> branches/permanent
----

در اینجا نحوه نمایش آن در طرف Mercurial آمده است:

[source,console]
----
$ hg branches
permanent                      7:a4529d07aad4
develop                        6:8f65e5e02793
default                        5:bd5ac26f11f9 (inactive)
$ hg log -G
o  changeset:   7:a4529d07aad4
|  branch:      permanent
|  tag:         tip
|  parent:      5:bd5ac26f11f9
|  user:        Ben Straub <ben@straub.cc>
|  date:        Thu Aug 14 20:21:09 2014 -0700
|  summary:     A permanent change
|
| @  changeset:   6:8f65e5e02793
|/   branch:      develop
|    user:        Ben Straub <ben@straub.cc>
|    date:        Thu Aug 14 20:06:38 2014 -0700
|    summary:     More documentation
|
o    changeset:   5:bd5ac26f11f9
|\   bookmark:    featureA
| |  parent:      4:0434aaa6b91f
| |  parent:      2:f098c7f45c4f
| |  user:        Ben Straub <ben@straub.cc>
| |  date:        Thu Aug 14 20:02:21 2014 -0700
| |  summary:     Merge remote-tracking branch 'origin/master'
[...]
----

نام شاخه `permanent` با تغییرات شماره‌گذاری شده 7 ثبت شده است.

از طرف گیت، کار کردن با هر یک از این سبک‌های شاخه مشابه است: فقط به صورت معمول checkout، commit، fetch، merge، pull و push انجام دهید. یک نکته‌ای که باید بدانید این است که Mercurial از بازنویسی تاریخچه پشتیبانی نمی‌کند، بلکه فقط می‌توان به آن اضافه کرد. در اینجا نحوه نمایش مخزن Mercurial ما پس از یک `rebase` تعاملی و یک `force-push` آمده است:
[source,console]
----
$ hg log --style compact -G
o  10[tip]   99611176cbc9   2014-08-14 20:21 -0700   ben
|    A permanent change
|
o  9   f23e12f939c3   2014-08-14 20:01 -0700   ben
|    Add some documentation
|
o  8:1   c16971d33922   2014-08-14 20:00 -0700   ben
|    goodbye
|
| o  7:5   a4529d07aad4   2014-08-14 20:21 -0700   ben
| |    A permanent change
| |
| | @  6   8f65e5e02793   2014-08-14 20:06 -0700   ben
| |/     More documentation
| |
| o    5[featureA]:4,2   bd5ac26f11f9   2014-08-14 20:02 -0700   ben
| |\     Merge remote-tracking branch 'origin/master'
| | |
| | o  4   0434aaa6b91f   2014-08-14 20:01 -0700   ben
| | |    update makefile
| | |
+---o  3:1   318914536c86   2014-08-14 20:00 -0700   ben
| |      goodbye
| |
| o  2   f098c7f45c4f   2014-08-14 20:01 -0700   ben
|/     Add some documentation
|
o  1   82e55d328c8c   2005-08-26 01:21 -0700   mpm
|    Create a makefile
|
o  0   0a04b987be5a   2005-08-26 01:20 -0700   mpm
     Create a standard "hello, world" program
----

تغییرات شماره‌گذاری شده 8، 9 و 10 ایجاد شده‌اند و به شاخه `permanent` تعلق دارند، اما تغییرات قدیمی هنوز در آنجا هستند. این ممکن است بسیار گیج‌کننده باشد برای هم‌تیمی‌هایی که از Mercurial استفاده می‌کنند، بنابراین سعی کنید از آن اجتناب کنید.

===== Mercurial Summary (خلاصه مرکوریال)

گیت و Mercurial به اندازه کافی مشابه هستند که کار کردن در مرز بین آن‌ها نسبتا بدون دردسر است. اگر از تغییر تاریخچه‌ای که از دستگاه شما خارج شده (همانطور که معمولاً توصیه می‌شود) اجتناب کنید، ممکن است حتی متوجه نشوید که طرف مقابل Mercurial است.